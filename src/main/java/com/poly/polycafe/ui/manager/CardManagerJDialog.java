/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.poly.polycafe.ui.manager;

import com.poly.polycafe.controller.CardManagerController;
import com.poly.polycafe.dao.GenericDAO;
import com.poly.polycafe.daoimpl.CardDAOImpl;
import com.poly.polycafe.entity.Card;
import com.poly.polycafe.entity.Cards;
import com.poly.polycafe.utils.XDialog;
import com.poly.polycafe.utils.XFile;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Gaudomun
 */
public class CardManagerJDialog extends javax.swing.JDialog implements CardManagerController{

    /**
     * Creates new form CardManagerJDialog
     */
    public CardManagerJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btgStatus = new javax.swing.ButtonGroup();
        tabs = new javax.swing.JTabbedPane();
        pnlList = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCards = new javax.swing.JTable();
        btnCheckALL = new javax.swing.JButton();
        btnUncheckAll = new javax.swing.JButton();
        btnDeleteChecked = new javax.swing.JButton();
        btnExcel = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        pnlForm = new javax.swing.JPanel();
        pnlButtons = new javax.swing.JPanel();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        btnFirst = new javax.swing.JButton();
        btnPrev = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnLast = new javax.swing.JButton();
        pnlControl = new javax.swing.JPanel();
        lblId = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        lblStatus = new javax.swing.JLabel();
        rdoOperating = new javax.swing.JRadioButton();
        rdoError = new javax.swing.JRadioButton();
        rdoLost = new javax.swing.JRadioButton();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Quản lý thẻ định danh");
        setPreferredSize(new java.awt.Dimension(453, 300));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        tabs.setPreferredSize(new java.awt.Dimension(453, 200));

        pnlList.setPreferredSize(new java.awt.Dimension(453, 200));

        jScrollPane1.setPreferredSize(new java.awt.Dimension(452, 80));

        tblCards.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Mã thẻ", "Trạng thái", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblCards.setSelectionBackground(new java.awt.Color(255, 102, 0));
        tblCards.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCardsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblCards);

        btnCheckALL.setText("Chọn tất cả");
        btnCheckALL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckALLActionPerformed(evt);
            }
        });

        btnUncheckAll.setText("Bỏ chọn tất cả");
        btnUncheckAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUncheckAllActionPerformed(evt);
            }
        });

        btnDeleteChecked.setText("Xóa");
        btnDeleteChecked.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteCheckedActionPerformed(evt);
            }
        });

        btnExcel.setBackground(new java.awt.Color(0, 102, 0));
        btnExcel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnExcel.setForeground(new java.awt.Color(255, 255, 255));
        btnExcel.setText("Xuất Excel");
        btnExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlListLayout = new javax.swing.GroupLayout(pnlList);
        pnlList.setLayout(pnlListLayout);
        pnlListLayout.setHorizontalGroup(
            pnlListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator2)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlListLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlListLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlListLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(pnlListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnExcel)
                            .addGroup(pnlListLayout.createSequentialGroup()
                                .addComponent(btnCheckALL)
                                .addGap(18, 18, 18)
                                .addComponent(btnUncheckAll)
                                .addGap(18, 18, 18)
                                .addComponent(btnDeleteChecked)))
                        .addGap(38, 38, 38))))
        );
        pnlListLayout.setVerticalGroup(
            pnlListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlListLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCheckALL)
                    .addComponent(btnUncheckAll)
                    .addComponent(btnDeleteChecked))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnExcel)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        tabs.addTab("Danh sách", pnlList);

        pnlForm.setPreferredSize(new java.awt.Dimension(452, 150));
        pnlForm.setLayout(new java.awt.BorderLayout());

        pnlButtons.setMinimumSize(new java.awt.Dimension(303, 50));
        pnlButtons.setPreferredSize(new java.awt.Dimension(303, 50));
        pnlButtons.setLayout(new java.awt.GridLayout(2, 4, 5, 5));

        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/add.png")));
        btnAdd.setToolTipText("Thêm mới");
        btnAdd.setPreferredSize(new java.awt.Dimension(72, 50));
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        pnlButtons.add(btnAdd);

        btnUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/edit.png")));
        btnUpdate.setToolTipText("Cập nhật");
        btnUpdate.setPreferredSize(new java.awt.Dimension(72, 20));
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        pnlButtons.add(btnUpdate);

        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/delete.png")));
        btnDelete.setToolTipText("Xóa");
        btnDelete.setPreferredSize(new java.awt.Dimension(72, 20));
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        pnlButtons.add(btnDelete);

        btnRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/refresh.png")));
        btnRefresh.setToolTipText("Làm mới");
        btnRefresh.setPreferredSize(new java.awt.Dimension(72, 20));
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });
        pnlButtons.add(btnRefresh);

        btnFirst.setText("<|");
        btnFirst.setToolTipText("First");
        btnFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstActionPerformed(evt);
            }
        });
        pnlButtons.add(btnFirst);

        btnPrev.setText("<<");
        btnPrev.setToolTipText("Trước");
        btnPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrevActionPerformed(evt);
            }
        });
        pnlButtons.add(btnPrev);

        btnNext.setText(">>");
        btnNext.setToolTipText("Next");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });
        pnlButtons.add(btnNext);

        btnLast.setText("|>");
        btnLast.setToolTipText("Last");
        btnLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLastActionPerformed(evt);
            }
        });
        pnlButtons.add(btnLast);

        pnlForm.add(pnlButtons, java.awt.BorderLayout.PAGE_END);

        pnlControl.setPreferredSize(new java.awt.Dimension(452, 50));

        lblId.setText("Mã thẻ:");

        lblStatus.setText("Trạng thái");

        btgStatus.add(rdoOperating);
        rdoOperating.setText("Operating");

        btgStatus.add(rdoError);
        rdoError.setText("Error");

        rdoLost.setText("Lost");

        javax.swing.GroupLayout pnlControlLayout = new javax.swing.GroupLayout(pnlControl);
        pnlControl.setLayout(pnlControlLayout);
        pnlControlLayout.setHorizontalGroup(
            pnlControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(pnlControlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblId, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlControlLayout.createSequentialGroup()
                            .addComponent(rdoOperating)
                            .addGap(18, 18, 18)
                            .addComponent(rdoError)
                            .addGap(18, 18, 18)
                            .addComponent(rdoLost))
                        .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(56, Short.MAX_VALUE))
        );
        pnlControlLayout.setVerticalGroup(
            pnlControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlControlLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(lblId)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblStatus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdoOperating)
                    .addComponent(rdoError)
                    .addComponent(rdoLost))
                .addGap(51, 51, 51)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlForm.add(pnlControl, java.awt.BorderLayout.CENTER);

        tabs.addTab("Biểu mẫu", pnlForm);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabs, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabs, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
       open();
    }//GEN-LAST:event_formWindowOpened

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        this.create();
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        this.update();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        this.delete();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void tblCardsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCardsMouseClicked
        index=tblCards.getSelectedRow();
        cardList = cardDao.findAll();
        Cards card = cardList.get(index);
        this.setForm(card);
        tabs.setSelectedIndex(1);
    }//GEN-LAST:event_tblCardsMouseClicked

    private void btnFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstActionPerformed
        this.moveFirst();
    }//GEN-LAST:event_btnFirstActionPerformed

    private void btnLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLastActionPerformed
        this.moveLast();
    }//GEN-LAST:event_btnLastActionPerformed

    private void btnPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrevActionPerformed
        this.movePrev();
    }//GEN-LAST:event_btnPrevActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        this.moveNext();
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        this.clear();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnCheckALLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckALLActionPerformed
        this.checkAll();
    }//GEN-LAST:event_btnCheckALLActionPerformed

    private void btnUncheckAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUncheckAllActionPerformed
        this.uncheckAll();
    }//GEN-LAST:event_btnUncheckAllActionPerformed

    private void btnDeleteCheckedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteCheckedActionPerformed
        this.deleteCheckedItems();
    }//GEN-LAST:event_btnDeleteCheckedActionPerformed

    private void btnExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcelActionPerformed
        this.exportExcel();
    }//GEN-LAST:event_btnExcelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CardManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CardManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CardManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CardManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CardManagerJDialog dialog = new CardManagerJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btgStatus;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCheckALL;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDeleteChecked;
    private javax.swing.JButton btnExcel;
    private javax.swing.JButton btnFirst;
    private javax.swing.JButton btnLast;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrev;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnUncheckAll;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lblId;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JPanel pnlButtons;
    private javax.swing.JPanel pnlControl;
    private javax.swing.JPanel pnlForm;
    private javax.swing.JPanel pnlList;
    private javax.swing.JRadioButton rdoError;
    private javax.swing.JRadioButton rdoLost;
    private javax.swing.JRadioButton rdoOperating;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JTable tblCards;
    private javax.swing.JTextField txtId;
    // End of variables declaration//GEN-END:variables

    DefaultTableModel model;
    
    GenericDAO<Cards, Integer> cardDao = new GenericDAO<>(Cards.class);
    
    List<Cards> cardList = List.of();
    
    CardDAOImpl dao = new CardDAOImpl();
    
    int index;
    

    @Override
    public void create() {
        Cards card = this.getForm();
        cardDao.save(card);
        this.fillToTable();
    }

    @Override
    public void update() {
        Integer id  = Integer.valueOf(txtId.getText());
        Cards card = cardDao.findById(id);
        
         if (card != null) {
            card.setStatus(getForm().getStatus());
            cardDao.update(card);            
            this.clear();
        fillToTable();
        } else {
            JOptionPane.showMessageDialog(this, "Không tìm thấy bản ghi để update!");
        }
    }

    @Override
    public void delete() {
        try {
            String idText = txtId.getText().trim();
            if (idText.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Chưa nhập ID để xóa!");
                return;
            }

            Integer id = Integer.valueOf(idText);
            Cards card = cardDao.findById(id);

            if (card == null) {
                JOptionPane.showMessageDialog(this, "Không tìm thấy bản ghi có ID = " + id);
                return;
            }

            int confirm = JOptionPane.showConfirmDialog(
                    this,
                    "Bạn có chắc muốn xóa bản ghi có ID = " + id + " không?",
                    "Xác nhận xóa",
                    JOptionPane.YES_NO_OPTION
            );

            if (confirm == JOptionPane.YES_OPTION) {
                cardDao.delete(card);
                JOptionPane.showMessageDialog(this, "Đã xóa thành công!");
                this.fillToTable();
                this.clear();
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "ID không hợp lệ!");
        }
    }

    @Override
    public void fillToTable() {
        model = (DefaultTableModel) tblCards.getModel();
        model.setRowCount(0);
        
        cardList = cardDao.findAll();
        
        Map<Cards.CardStatus, String> status = Map.of(Cards.CardStatus.OPERATING,"Operating", Cards.CardStatus.ERROR, "Error", Cards.CardStatus.LOST, "Lost");
                
        for(Cards card : cardList) {
            String statusText = status.getOrDefault(card.getStatus(), "");
            
            Object[] rowData = {
                card.getId(),
                statusText
            };
            model.addRow(rowData);
        }

    }

    @Override
    public void open() {
        this.setLocationRelativeTo(null);
        this.fillToTable();
        
    }

    @Override
    public void setForm(Cards entity) {
        txtId.setText(String.valueOf(entity.getId()));
        
        Cards.CardStatus value = entity.getStatus();
        
        if (value == null || value == Cards.CardStatus.LOST) {
            rdoLost.setSelected(true);
        } else if (value == Cards.CardStatus.ERROR) {
            rdoError.setSelected(true);
        } else {
            rdoOperating.setSelected(true);
        }

    }

    @Override
    public Cards getForm() {
        Cards card = new Cards();
        
        Cards.CardStatus value;
        
        if(rdoOperating.isSelected()) value = Cards.CardStatus.OPERATING;
        else if(rdoError.isSelected()) value = Cards.CardStatus.ERROR;
        else value = Cards.CardStatus.LOST;
        
        card.setStatus(value);
        
        return card;
    }

    @Override
    public void moveFirst() {
        index=0;
        cardList = cardDao.findAll();
       this.setForm(cardList.get(index));
       tblCards.setRowSelectionInterval(index, index);
    }

    @Override
    public void moveNext() {
        index++;
        if(index>=tblCards.getRowCount()-1) this.moveFirst();
        this.setForm(cardList.get(index));
       tblCards.setRowSelectionInterval(index, index);
    }

    @Override
    public void movePrev() {
        index--;
        if(index<0) this.moveLast();
        this.setForm(cardList.get(index));
        tblCards.setRowSelectionInterval(index, index);
    }

    @Override
    public void moveLast() {
        index=cardList.size()-1;
        this.setForm(cardList.get(index));
        tblCards.setRowSelectionInterval(index, index);
    }
    
    
    @Override
    public void checkAll() {
        for(int i=0; i<tblCards.getRowCount()-1; i++) {
            tblCards.setValueAt(true, i, 2);
        }
        
    }

    @Override
    public void uncheckAll() {
        for(int i=0; i<tblCards.getRowCount()-1; i++) {
            tblCards.setValueAt(false, i, 2);
        }
    }

    @Override
    public void deleteCheckedItems() {
        List<Cards> checkedItems = new ArrayList<>();

        for (int i = 0; i < tblCards.getRowCount(); i++) {
            Object value = tblCards.getValueAt(i, 2); 

            if (value instanceof Boolean && (Boolean) value) {
                Integer id = (Integer) tblCards.getValueAt(i, 0);
                Cards card = cardDao.findById(id);
                if (card != null) {
                    checkedItems.add(card);
                }
            }
        }

        if (checkedItems.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Không có mục nào được chọn để xóa!");
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(
                this,
                "Bạn có chắc muốn xóa " + checkedItems.size() + " bản ghi đã chọn không?",
                "Xác nhận xóa",
                JOptionPane.YES_NO_OPTION
        );

        if (confirm == JOptionPane.YES_OPTION) {
            for (Cards card : checkedItems) {
                cardDao.delete(card);
            }
            JOptionPane.showMessageDialog(this, "Đã xóa thành công!");
            fillToTable();
        }
    }


    @Override
    public void exportExcel() {
        if(tblCards.getRowCount() == 0) {
            XDialog.alert("Không tìm thấy dữ liệu!");
            return;
            }
            String[] header = {"Mã thẻ", "Trạng thái"};
            List<Cards> list = cardDao.findAll();
            List<Object[]> listObj = new ArrayList<>();
               for(Cards obj : list) {
                   Object[] row = {
                      obj.getId(),
                       obj.getStatus()
                   };
                  listObj.add(row);
               }
            String fileName = "Quản lý thẻ định danh";
            String title = "Chi tiết thông tin thẻ định danh";

            XFile.exportFile(this, title, header, fileName, listObj);
    }

    @Override
    public void clear() {
        txtId.setText("");
        btgStatus.clearSelection();
    }
}
