/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.poly.polycafe.ui.manager;

import com.poly.polycafe.controller.BillManagerController;
import com.poly.polycafe.dao.GenericDAO;
import com.poly.polycafe.dao.BillDetailDAO;
import com.poly.polycafe.daoimpl.BillDetailDAOImpl;
import com.poly.polycafe.entity.BillDetails;
import com.poly.polycafe.entity.Bills;
import com.poly.polycafe.entity.Bill;
import com.poly.polycafe.entity.Cards;
import com.poly.polycafe.entity.Users;
import com.poly.polycafe.entity.BillDetail;
import com.poly.polycafe.utils.HibernateUtil;
import com.poly.polycafe.utils.TimeRange;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import lombok.*;
import org.hibernate.Session;

/**
 *
 * @author Gaudomun
 */
@Setter
public class BillManagerJDialog extends javax.swing.JDialog implements BillManagerController {

    /**
     * Creates new form BillManagerJDialog
     */
    private Bill billl;
            
    public BillManagerJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        btgStatus = new javax.swing.ButtonGroup();
        tabs = new javax.swing.JTabbedPane();
        pnlList = new javax.swing.JPanel();
        pnlFilter = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtBegin = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtEnd = new javax.swing.JTextField();
        btnFilter = new javax.swing.JButton();
        cboDateChooser = new javax.swing.JComboBox<>();
        btnCancel = new javax.swing.JButton();
        pnlButtons = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        pnlTable = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblBills = new javax.swing.JTable();
        pnlForm = new javax.swing.JPanel();
        pnlControlButtons = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        btnCreate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        btnFirst = new javax.swing.JButton();
        btnPrev = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnLast = new javax.swing.JButton();
        pnlInput = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtCard = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        rdoServicing = new javax.swing.JRadioButton();
        rdoCompleted = new javax.swing.JRadioButton();
        rdoCanceled = new javax.swing.JRadioButton();
        jLabel8 = new javax.swing.JLabel();
        txtUser = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDetail = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        dateCheckin = new com.toedter.calendar.JDateChooser();
        dateCheckout = new com.toedter.calendar.JDateChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Quản lý hóa đơn");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        pnlList.setLayout(new java.awt.BorderLayout());

        pnlFilter.setPreferredSize(new java.awt.Dimension(400, 50));
        pnlFilter.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Từ ngày");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipadx = 5;
        pnlFilter.add(jLabel1, gridBagConstraints);

        txtBegin.setPreferredSize(new java.awt.Dimension(100, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        pnlFilter.add(txtBegin, gridBagConstraints);

        jLabel2.setText("Đến ngày");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipadx = 5;
        pnlFilter.add(jLabel2, gridBagConstraints);

        txtEnd.setMinimumSize(new java.awt.Dimension(100, 22));
        txtEnd.setPreferredSize(new java.awt.Dimension(100, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        pnlFilter.add(txtEnd, gridBagConstraints);

        btnFilter.setText("Lọc");
        btnFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        pnlFilter.add(btnFilter, gridBagConstraints);

        cboDateChooser.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hôm nay", "Tuần này", "Tháng này", "Quý này", "Năm nay", " ", " " }));
        cboDateChooser.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cboDateChooserMouseClicked(evt);
            }
        });
        cboDateChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboDateChooserActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 10;
        gridBagConstraints.gridy = 0;
        pnlFilter.add(cboDateChooser, gridBagConstraints);

        btnCancel.setText("Hủy");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        pnlFilter.add(btnCancel, gridBagConstraints);

        pnlList.add(pnlFilter, java.awt.BorderLayout.PAGE_START);

        pnlButtons.setPreferredSize(new java.awt.Dimension(400, 30));
        pnlButtons.setLayout(new java.awt.GridLayout(1, 2, 5, 0));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 310, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 30, Short.MAX_VALUE)
        );

        pnlButtons.add(jPanel1);

        jPanel2.setLayout(new java.awt.GridLayout(1, 0, 3, 0));

        jButton1.setText("Chọn");
        jPanel2.add(jButton1);

        jButton2.setText("Bỏ chọn");
        jPanel2.add(jButton2);

        jButton3.setText("Xóa");
        jPanel2.add(jButton3);

        pnlButtons.add(jPanel2);

        pnlList.add(pnlButtons, java.awt.BorderLayout.PAGE_END);

        tblBills.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Mã phiếu", "Thẻ số", "Thời điểm tạo", "Thời điểm thanh toán", "Trạng thái", "Nhân viên", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblBills.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblBillsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblBills);

        javax.swing.GroupLayout pnlTableLayout = new javax.swing.GroupLayout(pnlTable);
        pnlTable.setLayout(pnlTableLayout);
        pnlTableLayout.setHorizontalGroup(
            pnlTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTableLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 614, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlTableLayout.setVerticalGroup(
            pnlTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTableLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pnlList.add(pnlTable, java.awt.BorderLayout.CENTER);

        tabs.addTab("Danh sách", pnlList);

        pnlForm.setLayout(new java.awt.BorderLayout());

        pnlControlButtons.setPreferredSize(new java.awt.Dimension(467, 50));
        pnlControlButtons.setLayout(new java.awt.GridLayout(1, 0, 10, 0));

        jPanel3.setLayout(new java.awt.GridLayout(1, 4));

        btnCreate.setText("Thêm");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });
        jPanel3.add(btnCreate);

        btnDelete.setText("Xóa");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        jPanel3.add(btnDelete);

        btnUpdate.setText("Cập nhật");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        jPanel3.add(btnUpdate);

        btnRefresh.setText("Làm mới");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });
        jPanel3.add(btnRefresh);

        pnlControlButtons.add(jPanel3);

        jPanel4.setLayout(new java.awt.GridLayout(1, 0));

        btnFirst.setText("<|");
        btnFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstActionPerformed(evt);
            }
        });
        jPanel4.add(btnFirst);

        btnPrev.setText("<<");
        btnPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrevActionPerformed(evt);
            }
        });
        jPanel4.add(btnPrev);

        btnNext.setText(">>");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });
        jPanel4.add(btnNext);

        btnLast.setText("|>");
        btnLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLastActionPerformed(evt);
            }
        });
        jPanel4.add(btnLast);

        pnlControlButtons.add(jPanel4);

        pnlForm.add(pnlControlButtons, java.awt.BorderLayout.PAGE_END);

        jLabel3.setText("Mã phiếu");

        jLabel4.setText("Thẻ số");

        jLabel5.setText("Thời điểm tạo");

        jLabel6.setText("Thời điểm thanh toán");

        jLabel7.setText("Trạng thái");

        btgStatus.add(rdoServicing);
        rdoServicing.setText("Servicing");

        btgStatus.add(rdoCompleted);
        rdoCompleted.setText("Completed");

        btgStatus.add(rdoCanceled);
        rdoCanceled.setText("Canceled");

        jLabel8.setText("Người tạo");

        tblDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "Đồ uống", "Đơn giá", "Giảm giá", "Số lượng", "Thành tiền"
            }
        ));
        jScrollPane2.setViewportView(tblDetail);

        jLabel9.setText("Phiếu chi tiết");

        javax.swing.GroupLayout pnlInputLayout = new javax.swing.GroupLayout(pnlInput);
        pnlInput.setLayout(pnlInputLayout);
        pnlInputLayout.setHorizontalGroup(
            pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInputLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlInputLayout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(549, Short.MAX_VALUE))
                    .addGroup(pnlInputLayout.createSequentialGroup()
                        .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlInputLayout.createSequentialGroup()
                                .addComponent(rdoServicing)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(rdoCompleted)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rdoCanceled, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlInputLayout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(241, 241, 241))
                            .addGroup(pnlInputLayout.createSequentialGroup()
                                .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtCard, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                                    .addComponent(txtUser))
                                .addGap(28, 28, 28))))
                    .addGroup(pnlInputLayout.createSequentialGroup()
                        .addComponent(dateCheckin, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(dateCheckout, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28))))
            .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlInputLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 614, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        pnlInputLayout.setVerticalGroup(
            pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInputLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCard, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(dateCheckin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateCheckout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdoServicing)
                    .addComponent(rdoCompleted)
                    .addComponent(rdoCanceled)
                    .addComponent(txtUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel9)
                .addContainerGap(115, Short.MAX_VALUE))
            .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlInputLayout.createSequentialGroup()
                    .addContainerGap(215, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pnlForm.add(pnlInput, java.awt.BorderLayout.CENTER);

        tabs.addTab("Biểu mẫu", pnlForm);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabs)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabs)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        if(billl != null) {
            this.showBill();
            this.showBillDetails(billl.getId());
        }
        else this.open();
    }//GEN-LAST:event_formWindowOpened

    private void tblBillsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblBillsMouseClicked
        this.fillToDetailTable(billList.get(tblBills.getSelectedRow()).getId());
        billList = billDao.findAll() ;
        Bills bill = billList.get(tblBills.getSelectedRow());
        this.setForm(bill);
        tabs.setSelectedIndex(1);
    }//GEN-LAST:event_tblBillsMouseClicked

    private void cboDateChooserMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cboDateChooserMouseClicked

    }//GEN-LAST:event_cboDateChooserMouseClicked

    private void cboDateChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboDateChooserActionPerformed
        this.getTimeRange();
    }//GEN-LAST:event_cboDateChooserActionPerformed

    private void btnFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterActionPerformed
        TimeRange timeRange = this.getTimeRange();
        this.filterByTimeRange(timeRange.getBegin(), timeRange.getEnd());
    }//GEN-LAST:event_btnFilterActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.fillToTable();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstActionPerformed
        this.moveFirst();
    }//GEN-LAST:event_btnFirstActionPerformed

    private void btnPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrevActionPerformed
        this.moveLast();
    }//GEN-LAST:event_btnPrevActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        this.moveNext();
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLastActionPerformed
        this.moveLast();
    }//GEN-LAST:event_btnLastActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        this.clear();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        this.create();
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        this.delete();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        this.update();
    }//GEN-LAST:event_btnUpdateActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BillManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BillManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BillManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BillManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                BillManagerJDialog dialog = new BillManagerJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btgStatus;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnFilter;
    private javax.swing.JButton btnFirst;
    private javax.swing.JButton btnLast;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrev;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cboDateChooser;
    private com.toedter.calendar.JDateChooser dateCheckin;
    private com.toedter.calendar.JDateChooser dateCheckout;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel pnlButtons;
    private javax.swing.JPanel pnlControlButtons;
    private javax.swing.JPanel pnlFilter;
    private javax.swing.JPanel pnlForm;
    private javax.swing.JPanel pnlInput;
    private javax.swing.JPanel pnlList;
    private javax.swing.JPanel pnlTable;
    private javax.swing.JRadioButton rdoCanceled;
    private javax.swing.JRadioButton rdoCompleted;
    private javax.swing.JRadioButton rdoServicing;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JTable tblBills;
    private javax.swing.JTable tblDetail;
    private javax.swing.JTextField txtBegin;
    private javax.swing.JTextField txtCard;
    private javax.swing.JTextField txtEnd;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtUser;
    // End of variables declaration//GEN-END:variables

    DefaultTableModel tblBillModel;
    DefaultTableModel tblDetailModel;
    
    GenericDAO<BillDetails, Long> detailDao  = new GenericDAO<>(BillDetails.class);
    List<BillDetails> detailList = List.of();
    
    GenericDAO<Bills, Long> billDao  = new GenericDAO<>(Bills.class);
    List<Bills> billList = List.of();
    
    GenericDAO<Cards, Integer> cardDao  = new GenericDAO<>(Cards.class);
    List<Cards> cardList = List.of();
    
    GenericDAO<Users, String> userDao  = new GenericDAO<>(Users.class);
    List<Users> userList = List.of();
    
    int index;
    
    @Override
    public void setForm(Bills entity) {
        txtId.setText(String.valueOf(entity.getId()));
        txtCard.setText(String.valueOf(entity.getCard().getId()));
        dateCheckin.setDate(Date.from(entity.getCheckin().atZone(ZoneId.systemDefault()).toInstant()));
        dateCheckout.setDate(Date.from(entity.getCheckout().atZone(ZoneId.systemDefault()).toInstant()));
        if(null!= entity.getStatus()) {
            switch (entity.getStatus()) {
                case 0 -> rdoCanceled.setSelected(true);
                case 1 -> rdoServicing.setSelected(true);
                case 2 -> rdoCompleted.setSelected(true);
                default -> {
                }
            }
        }
        txtUser.setText(entity.getUser().getUsername());
    }

    @Override
    public Bills getForm() {
        Bills bill = new Bills();
        bill.setId(Long.valueOf(txtId.getText()));
        
        Cards card = cardDao.findById(Integer.valueOf(txtCard.getText()));
        if(card !=null) {
            bill.setCard(card);
        }
        
        bill.setCheckin(dateCheckin.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime());
        bill.setCheckout(dateCheckout.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime());
        
        if(rdoCanceled.isSelected()) bill.setStatus(0);
        else if(rdoServicing.isSelected()) bill.setStatus(1);
        else if(rdoCompleted.isSelected()) bill.setStatus(2);
        
        Users user = userDao.findById(txtUser.getText());
        if(user != null) bill.setUser(user);
        
        return bill;
    }

    @Override
    public void create() {
        Bills bill = this.getForm();
        billDao.save(bill);
        this.fillToTable();
        this.clear();
    }

    @Override
    public void update() {
        Long id  = Long.valueOf(txtId.getText());
        Bills bill = billDao.findById(id);
        
         if (bill != null) {
            Cards card = cardDao.findById(Integer.valueOf(txtCard.getText()));
            if(card !=null) {
                bill.setCard(card);
            }
        
            bill.setCheckin(dateCheckin.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime());
            bill.setCheckout(dateCheckout.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime());

            if(rdoCanceled.isSelected()) bill.setStatus(0);
            else if(rdoServicing.isSelected()) bill.setStatus(1);
            else if(rdoCompleted.isSelected()) bill.setStatus(2);

            Users user = userDao.findById(txtUser.getText());
            if(user != null) bill.setUser(user);
                billDao.update(bill);            
                this.clear();
            fillToTable();
        } else {
            JOptionPane.showMessageDialog(this, "Không tìm thấy bản ghi để update!");
        }
    }

    @Override
    public void delete() {
        try {
            String idText = txtId.getText().trim();
            if (idText.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Chưa nhập ID để xóa!");
                return;
            }

            Long id = Long.valueOf(idText);
            Bills bill = billDao.findById(id);

            if (bill == null) {
                JOptionPane.showMessageDialog(this, "Không tìm thấy bản ghi có ID = " + id);
                return;
            }

            int confirm = JOptionPane.showConfirmDialog(
                    this,
                    "Bạn có chắc muốn xóa bản ghi có ID = " + id + " không?",
                    "Xác nhận xóa",
                    JOptionPane.YES_NO_OPTION
            );

            if (confirm == JOptionPane.YES_OPTION) {
                billDao.delete(bill);
                JOptionPane.showMessageDialog(this, "Đã xóa thành công!");
                this.fillToTable();
                this.clear();
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "ID không hợp lệ!");
        }
    }

    @Override
    public void clear() {
        txtId.setText("");
        txtCard.setText("");
        dateCheckin.setDate(null);
        dateCheckout.setDate(null);
        btgStatus.clearSelection();
        txtUser.setText("");
        
        tblDetailModel = (DefaultTableModel) tblDetail.getModel();
        tblDetailModel.setRowCount(0);
    }

    @Override
    public void moveFirst() {
        index=0;
        billList = billDao.findAll();
       this.setForm(billList.get(index));
       tblBills.setRowSelectionInterval(index, index);
    }

    @Override
    public void moveNext() {
        index++;
        if(index>=tblBills.getRowCount()-1) this.moveFirst();
        this.setForm(billList.get(index));
       tblBills.setRowSelectionInterval(index, index);
    }

    @Override
    public void movePrev() {
        index--;
        if(index<0) this.moveLast();
        this.setForm(billList.get(index));
        tblBills.setRowSelectionInterval(index, index);
    }

    @Override
    public void moveLast() {
        index=billList.size()-1;
        billList = billDao.findAll();
        this.setForm(billList.get(index));
        tblBills.setRowSelectionInterval(index, index);
    }

    @Override
    public void checkAll() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void uncheckAll() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void deleteCheckedItems() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void exportExcel() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void fillToTable() {
        tblBillModel = (DefaultTableModel) tblBills.getModel();
        tblBillModel.setRowCount(0);
        
        billList = this.fetchAllFromBills();
        
        Map<Integer, String> statusMap = new HashMap<>();
       statusMap.put(0, "Canceled");
       statusMap.put(1, "Servicing");
       statusMap.put(2, "Completed");
       String statusText= "";
        
        for(Bills bill :billList) {
            statusText= statusMap.get(bill.getStatus());
            Object[] rowData = {
                bill.getId(),
                "Thẻ số #" + bill.getCard().getId(),
                bill.getCheckin(),
                bill.getCheckout()!=null ? bill.getCheckout(): "Chưa checkout",
                statusText,
                bill.getUser().getUsername()
            };
            tblBillModel.addRow(rowData);
        }
    }
    
    public List<Bills> fetchAllFromBills() {
        try(Session session = HibernateUtil.getSession()) {
            return session.createQuery("SELECT DISTINCT B FROM Bills B LEFT JOIN FETCH B.card LEFT JOIN FETCH B.user ", Bills.class).list();
        }
    }

    @Override
    public void open() {
        this.setLocationRelativeTo(null);
        this.fillToTable();
    }

    @Override
    public void fillToDetailTable(Long billId) {
        detailList = this.fetchAllFromBillDetails();
        tblDetailModel = (DefaultTableModel)tblDetail.getModel();
        tblDetailModel.setRowCount(0);
        
        for(BillDetails detail : detailList) {
            if(Objects.equals(detail.getBill().getId(), billId)) {
                Double unitPrice = detail.getUnitPrice();
                Double discount = detail.getDiscount();
                Integer quantity = detail.getQuantity();
                Object[] rowData = {
                  detail.getDrink().getName(),
                    unitPrice,
                    discount,
                    quantity,
                    String.valueOf((1-discount)*unitPrice*quantity)
                };
                tblDetailModel.addRow(rowData);
            }
        }
        
    }
    
    public List<BillDetails> fetchAllFromBillDetails() {
        try(Session session = HibernateUtil.getSession()) {
            return  session.createQuery("""
                                        select distinct bd from BillDetails bd
                                        left join fetch bd.drink
                                        left join fetch bd.bill
                                         """, BillDetails.class
                                        ).list();
        }
    }

    @Override
    public void filterByTimeRange(LocalDateTime begin, LocalDateTime end) {
        billList = this.fetchAllByTimeRange(begin, end);
        tblBillModel.setRowCount(0);
        
        Map<Integer, String> statusMap = new HashMap<>();
       statusMap.put(0, "Canceled");
       statusMap.put(1, "Servicing");
       statusMap.put(2, "Completed");
       String statusText= "";
        
        for(Bills bill :billList) {
            statusText= statusMap.get(bill.getStatus());
            Object[] rowData = {
                bill.getId(),
                "Thẻ số #" + bill.getCard().getId(),
                bill.getCheckin(),
                bill.getCheckout(),
                statusText,
                bill.getUser().getUsername()
            };
            tblBillModel.addRow(rowData);
        }
        
    }
    
    public List<Bills> fetchAllByTimeRange(LocalDateTime begin, LocalDateTime end) {
        try (Session session = HibernateUtil.getSession()) {
        String hql = """
            SELECT DISTINCT b FROM Bills b
            LEFT JOIN FETCH b.card
            LEFT JOIN FETCH b.user
            WHERE b.checkin < :end AND b.checkout > :begin
        """;

        return session.createQuery(hql, Bills.class)
                      .setParameter("begin", begin)
                      .setParameter("end", end)
                      .list();
        }
    }
    
    public TimeRange getTimeRange() {
        TimeRange timeRange = null;
        String selected = (String) cboDateChooser.getSelectedItem();
        switch(selected) {
            case("Hôm nay") -> timeRange = TimeRange.today();
            case("Tuần này") -> timeRange = TimeRange.thisWeek();
            case("Tháng này") -> timeRange = TimeRange.thisMonth();
            case("Quý này") -> timeRange = TimeRange.thisQuarter();
            case("Năm nay") -> timeRange = TimeRange.thisYear();
            default -> {
                JOptionPane.showMessageDialog(null, "Chưa chọn khoảng thời gian hợp lệ");
                return null;
            }
         }
            txtBegin.setText(String.valueOf(timeRange.getBegin()));
            txtEnd.setText(String.valueOf(timeRange.getEnd()));
        return timeRange;

    }

    public void showBill() {
        tblBillModel = (DefaultTableModel) tblBills.getModel();
        tblBillModel.setRowCount(0);
        
        Map<Integer, String> statusMap = new HashMap<>();
       statusMap.put(0, "Canceled");
       statusMap.put(1, "Completed");
       statusMap.put(2, "Servicing");
       String statusText= "";
        
        statusText= statusMap.get(billl.getStatus());
        Object[] rowData = {
            billl.getId(),
            "Thẻ số #" + billl.getCardId(),
            billl.getCheckin(),
            billl.getCheckout()!=null ? billl.getCheckout(): "Chưa checkout",
            statusText,
            billl.getUsername()
        };
        tblBillModel.addRow(rowData);
        
    }
    
    public void showBillDetails(Long billId) {
        tblDetailModel = (DefaultTableModel) tblDetail.getModel();
        tblDetailModel.setRowCount(0);
        
        BillDetailDAO bdDao = new BillDetailDAOImpl();
        List<BillDetail> bdList = bdDao.findAll();
        for(BillDetail bd : bdList) {
            if(Objects.equals(bd.getBillId(), billId)) {
                Object[] rowData = {
                  bd.getDrinkName(),
                  bd.getUnitPrice(),
                  bd.getDiscount(),
                  bd.getQuantity(),
                 (bd.getUnitPrice()*bd.getQuantity()*(1-bd.getDiscount()))
                };
                tblDetailModel.addRow(rowData);
            }   
        }
   
    }
}
