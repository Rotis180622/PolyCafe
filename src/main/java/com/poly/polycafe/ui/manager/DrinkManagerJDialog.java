/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.poly.polycafe.ui.manager;

import com.poly.polycafe.controller.DrinkController;
import com.poly.polycafe.dao.GenericDAO;
import com.poly.polycafe.entity.Categories;
import com.poly.polycafe.entity.Drinks;
import com.poly.polycafe.utils.HibernateUtil;
import java.awt.event.MouseAdapter;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import org.hibernate.Session;

/**
 *
 * @author Gaudomun
 */
public class DrinkManagerJDialog extends javax.swing.JDialog implements DrinkController {

    /**
     * Creates new form DrinkManagerJDialog
     */
    public DrinkManagerJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btgStatus = new javax.swing.ButtonGroup();
        tabs = new javax.swing.JTabbedPane();
        pnlList = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCategories = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDrinks = new javax.swing.JTable();
        btnCheckAll = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        txtKeyword = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        pnlForm = new javax.swing.JPanel();
        pnlButtons = new javax.swing.JPanel();
        pnlCrudButtons = new javax.swing.JPanel();
        btnCreate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        pnlNavButtons = new javax.swing.JPanel();
        btnFirst = new javax.swing.JButton();
        btnPrev = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnLast = new javax.swing.JButton();
        pnlControls = new javax.swing.JPanel();
        pnlProfile = new javax.swing.JPanel();
        lblProfile = new javax.swing.JLabel();
        pnlMainControls = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtPrice = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        sliderDiscount = new javax.swing.JSlider();
        jLabel5 = new javax.swing.JLabel();
        cboType = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        rdoAvailable = new javax.swing.JRadioButton();
        rdoEmpty = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Quản lý đồ uống");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        tblCategories.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Loại đồ uống"
            }
        ));
        tblCategories.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCategoriesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblCategories);

        tblDrinks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Mã", "Tên", "Đơn giá", "Giảm giá", "Trạng thái", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblDrinks.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDrinksMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblDrinks);

        btnCheckAll.setText("Chọn tất cả");
        btnCheckAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckAllActionPerformed(evt);
            }
        });

        jButton1.setText("Bỏ chọn tất cả");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Xóa các mục");

        btnReset.setText("Làm mới");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        jLabel7.setText("Nhập tên đồ uống");

        btnSearch.setText("Tìm kiếm");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlListLayout = new javax.swing.GroupLayout(pnlList);
        pnlList.setLayout(pnlListLayout);
        pnlListLayout.setHorizontalGroup(
            pnlListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlListLayout.createSequentialGroup()
                .addGroup(pnlListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlListLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 458, Short.MAX_VALUE))
                    .addGroup(pnlListLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnCheckAll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtKeyword))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnReset, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(12, 12, 12))
        );
        pnlListLayout.setVerticalGroup(
            pnlListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlListLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(pnlListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(pnlListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtKeyword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnReset)
                    .addComponent(btnSearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCheckAll)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(28, 28, 28))
        );

        tabs.addTab("Danh sách", pnlList);

        pnlForm.setLayout(new java.awt.BorderLayout());

        pnlButtons.setPreferredSize(new java.awt.Dimension(522, 30));
        pnlButtons.setLayout(new java.awt.GridLayout(1, 3, 5, 0));

        pnlCrudButtons.setLayout(new java.awt.GridLayout(1, 4));

        btnCreate.setText("Thêm");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });
        pnlCrudButtons.add(btnCreate);

        btnDelete.setText("Xóa");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        pnlCrudButtons.add(btnDelete);

        btnUpdate.setText("Cập nhật");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        pnlCrudButtons.add(btnUpdate);

        btnRefresh.setText("Làm mới");
        pnlCrudButtons.add(btnRefresh);

        pnlButtons.add(pnlCrudButtons);

        pnlNavButtons.setLayout(new java.awt.GridLayout(1, 4));

        btnFirst.setText("<|");
        pnlNavButtons.add(btnFirst);

        btnPrev.setText("<<");
        pnlNavButtons.add(btnPrev);

        btnNext.setText(">>");
        pnlNavButtons.add(btnNext);

        btnLast.setText("|>");
        pnlNavButtons.add(btnLast);

        pnlButtons.add(pnlNavButtons);

        pnlForm.add(pnlButtons, java.awt.BorderLayout.PAGE_END);

        pnlProfile.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 0, 0)));

        javax.swing.GroupLayout pnlProfileLayout = new javax.swing.GroupLayout(pnlProfile);
        pnlProfile.setLayout(pnlProfileLayout);
        pnlProfileLayout.setHorizontalGroup(
            pnlProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblProfile, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
        );
        pnlProfileLayout.setVerticalGroup(
            pnlProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlProfileLayout.createSequentialGroup()
                .addComponent(lblProfile, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jLabel1.setText("Mã đồ uống");

        jLabel2.setText("Tên đồ uống");

        jLabel3.setText("Đơn giá");

        jLabel4.setText("Mức giảm giá");

        jLabel5.setText("Loại");

        jLabel6.setText("Tình trạng");

        btgStatus.add(rdoAvailable);
        rdoAvailable.setText("Còn hàng");

        btgStatus.add(rdoEmpty);
        rdoEmpty.setText("Hết hàng");

        javax.swing.GroupLayout pnlMainControlsLayout = new javax.swing.GroupLayout(pnlMainControls);
        pnlMainControls.setLayout(pnlMainControlsLayout);
        pnlMainControlsLayout.setHorizontalGroup(
            pnlMainControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainControlsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMainControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainControlsLayout.createSequentialGroup()
                        .addGroup(pnlMainControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlMainControlsLayout.createSequentialGroup()
                                .addGroup(pnlMainControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(pnlMainControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(pnlMainControlsLayout.createSequentialGroup()
                                .addGroup(pnlMainControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cboType, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                                .addGroup(pnlMainControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlMainControlsLayout.createSequentialGroup()
                                        .addComponent(rdoAvailable, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(rdoEmpty, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(sliderDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(2, 2, 2)))
                        .addGap(15, 15, 15))
                    .addGroup(pnlMainControlsLayout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(140, 140, 140))))
        );
        pnlMainControlsLayout.setVerticalGroup(
            pnlMainControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainControlsLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(pnlMainControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(pnlMainControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(pnlMainControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMainControlsLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jLabel3))
                    .addGroup(pnlMainControlsLayout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(jLabel4)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMainControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sliderDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(pnlMainControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(pnlMainControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rdoAvailable)
                    .addComponent(rdoEmpty))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlControlsLayout = new javax.swing.GroupLayout(pnlControls);
        pnlControls.setLayout(pnlControlsLayout);
        pnlControlsLayout.setHorizontalGroup(
            pnlControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlControlsLayout.createSequentialGroup()
                .addComponent(pnlProfile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlMainControls, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        pnlControlsLayout.setVerticalGroup(
            pnlControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlControlsLayout.createSequentialGroup()
                .addComponent(pnlMainControls, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(pnlProfile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pnlForm.add(pnlControls, java.awt.BorderLayout.CENTER);

        tabs.addTab("Biểu mẫu", pnlForm);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabs)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabs)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        this.open();
    }//GEN-LAST:event_formWindowOpened

    private void tblCategoriesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCategoriesMouseClicked
        this.fillToTable();
    }//GEN-LAST:event_tblCategoriesMouseClicked

    private void btnCheckAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckAllActionPerformed
        this.checkAll();
    }//GEN-LAST:event_btnCheckAllActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.uncheckAll();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        this.openTable();
        txtKeyword.setText("");
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        String keyword = txtKeyword.getText();
        this.searchByKeyword(keyword);
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        this.update();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void tblDrinksMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDrinksMouseClicked
        int catRow = tblCategories.getSelectedRow();

        Drinks drink = null;
        
        if(catRow>=0) {
            drink = drinkList.get(tblDrinks.getSelectedRow());
        }else {
            drinkList = this.findAllWithCategories() ;
            drink = drinkList.get(tblDrinks.getSelectedRow());
        }
        tabs.setSelectedIndex(1);
        this.setForm(drink);
    }//GEN-LAST:event_tblDrinksMouseClicked

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        this.create();
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        this.delete();
    }//GEN-LAST:event_btnDeleteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DrinkManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DrinkManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DrinkManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DrinkManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DrinkManagerJDialog dialog = new DrinkManagerJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btgStatus;
    private javax.swing.JButton btnCheckAll;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnFirst;
    private javax.swing.JButton btnLast;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrev;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cboType;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblProfile;
    private javax.swing.JPanel pnlButtons;
    private javax.swing.JPanel pnlControls;
    private javax.swing.JPanel pnlCrudButtons;
    private javax.swing.JPanel pnlForm;
    private javax.swing.JPanel pnlList;
    private javax.swing.JPanel pnlMainControls;
    private javax.swing.JPanel pnlNavButtons;
    private javax.swing.JPanel pnlProfile;
    private javax.swing.JRadioButton rdoAvailable;
    private javax.swing.JRadioButton rdoEmpty;
    private javax.swing.JSlider sliderDiscount;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JTable tblCategories;
    private javax.swing.JTable tblDrinks;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtKeyword;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPrice;
    // End of variables declaration//GEN-END:variables
    
    int index;
    DefaultTableModel catTblModel;
    DefaultTableModel drinkTblModel;
    
    GenericDAO<Categories, String> catDao = new GenericDAO<>(Categories.class);
    List<Categories> catList = List.of();
    
    GenericDAO<Drinks, String> drinkDao = new GenericDAO<>(Drinks.class);
    List<Drinks> drinkList = List.of();
    
    @Override
    public void setForm(Drinks entity) {
        txtId.setText(entity.getId());
        txtName.setText(entity.getName());
        txtPrice.setText(String.valueOf(entity.getUnitPrice()));
        sliderDiscount.setValue((int) (entity.getDiscount()*100));
        if(entity.isAvailable()) rdoAvailable.setSelected(true);
        else rdoEmpty.setSelected(true);
        lblProfile.setIcon(new ImageIcon(getClass().getResource("/images/"+entity.getImage())));
        cboType.setSelectedItem(entity.getCategory().getName());
 
    }
    
    public void setCboType() {
        catList = this.findAllWithDrinks();
        for(Categories cat : catList) {
            cboType.addItem(cat.getName());
        }
    }

    @Override
    public Drinks getForm() {
        catList = catDao.findAll();
        
        Drinks drink = new Drinks();
        drink.setId(txtId.getText());
        drink.setName(txtName.getText());
        drink.setUnitPrice(Double.parseDouble(txtPrice.getText()));
        drink.setDiscount((double) sliderDiscount.getValue()/100);
        if(rdoAvailable.isSelected())drink.setAvailable(true);
        else drink.setAvailable(false);
        for(Categories cat : catList) {
            if(cat.getName().equals((String)cboType.getSelectedItem())) {
                 drink.setCategory(cat);
            }
        }
       
        return drink;
    }

    @Override
    public void create() {
        drinkDao.save(this.getForm());
        this.openTable();
        this.fillCategoriesTable();
        this.clear();
    }

    @Override
    public void update() {
        String id  = txtId.getText();
        Drinks drink = drinkDao.findById(id);
        
         if (drink != null) {
             drink.setId(txtId.getText());
            drink.setName(txtName.getText());
            drink.setUnitPrice(Double.parseDouble(txtPrice.getText()));
            drink.setDiscount((double) sliderDiscount.getValue()/100);
            if(rdoAvailable.isSelected())drink.setAvailable(true);
            else drink.setAvailable(false);
            drink.setCategory(this.getForm().getCategory());
            drinkDao.update(drink);
            this.clear();
            this.fillCategoriesTable();
            openTable();
        } else {
            JOptionPane.showMessageDialog(this, "Không tìm thấy bản ghi để update!");
        }
    }

    @Override
    public void delete() {
         try {
            String id = txtId.getText().trim();
            if (id.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Chưa nhập ID để xóa!");
                return;
            }

            Drinks drink = drinkDao.findById(id);

            if (drink == null) {
                JOptionPane.showMessageDialog(this, "Không tìm thấy bản ghi có ID = " + id);
                return;
            }

            int confirm = JOptionPane.showConfirmDialog(
                    this,
                    "Bạn có chắc muốn xóa bản ghi có ID = " + id + " không?",
                    "Xác nhận xóa",
                    JOptionPane.YES_NO_OPTION
            );

            if (confirm == JOptionPane.YES_OPTION) {
                drinkDao.delete(drink);
                JOptionPane.showMessageDialog(this, "Đã xóa thành công!");
                this.fillCategoriesTable();
                this.openTable();
                this.clear();
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "ID không hợp lệ!");
        }
    }

    @Override
    public void clear() {
        txtId.setText("");
        txtName.setText("");
        txtPrice.setText("");
        sliderDiscount.setValue(0);
        btgStatus.clearSelection();
    }

    @Override
    public void moveFirst() {
        this.moveTo(0);
    }

    @Override
    public void moveNext() {
        index--;
        this.moveTo(index);
    }

    @Override
    public void movePrev() {
        index++;
        this.moveTo(index);
    }

    @Override
    public void moveLast() {
        this.moveTo(tblDrinks.getRowCount()-1);
    }
    
    public void moveTo(int index) {
        if (index < 0) {
        this.moveLast();
        } else if (index >= tblDrinks.getRowCount()) {
            this.moveFirst();
        } else {
            tblDrinks.clearSelection();
            tblDrinks.setRowSelectionInterval(index, index);

        }
    }

    @Override
    public void checkAll() {
        setCheckedAll(true);
    }

    @Override
    public void uncheckAll() {
        setCheckedAll(false);
    }
    
    private void setCheckedAll(boolean checked) {
    for (int i = 0; i < tblDrinks.getRowCount(); i++) {
        tblDrinks.setValueAt(checked, i, 5);
    }
}

    @Override
    public void deleteCheckedItems() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void exportExcel() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
    
    public List<Categories> findAllWithDrinks() {
        try (Session session = HibernateUtil.getSession()) {
            return session.createQuery(
                "select distinct c from Categories c left join fetch c.drinks",
                Categories.class
            ).list();
        }
    }
     
      @Override
    public void fillCategoriesTable() {
        catTblModel = (DefaultTableModel) tblCategories.getModel();
        catTblModel.setRowCount(0);

        catList = this.findAllWithDrinks();
        catList.forEach(category -> {
        Object[] rowData = {
            category.getName()
        };
       catTblModel.addRow(rowData);
        });
    }
    

    @Override
    public void fillToTable() {
        Categories cat = catList.get(tblCategories.getSelectedRow());
        
        drinkTblModel = (DefaultTableModel)tblDrinks.getModel();
        drinkTblModel.setRowCount(0);
        
        drinkList = cat.getDrinks();
        
        for(Drinks drink : drinkList) {
            Object[] rowData = {
                drink.getId(),
                drink.getName(),
                drink.getUnitPrice(),
                drink.getDiscount(),
                drink.isAvailable()?"Còn hàng":"Hết hàng"
            };
            drinkTblModel.addRow(rowData);
        }
        System.out.println("Selected row: " + tblCategories.getSelectedRow());
        System.out.println("Category: " + cat.getName());
        System.out.println("Drinks size: " + drinkList.size());
    }
    
    public void openTable() {
        drinkTblModel = (DefaultTableModel)tblDrinks.getModel();
        drinkTblModel.setRowCount(0);
        drinkList = drinkDao.findAll();
        
        for(Drinks drink : drinkList) {
            Object[] rowData = {
                drink.getId(),
                drink.getName(),
                drink.getUnitPrice(),
                drink.getDiscount(),
                drink.isAvailable()?"Còn hàng":"Hết hàng"
            };
            drinkTblModel.addRow(rowData);
        }
    }

    @Override
    public void open() {
        this.setLocationRelativeTo(null);
        this.fillCategoriesTable();
        this.openTable();
        this.getSuggestionList();
        this.setCboType();
    }

    public List<Drinks> findAllWithCategories() {
        try(Session session = HibernateUtil.getSession()) {
            return session.createQuery("select distinct d from Drinks d left join fetch d.category", Drinks.class).list();
        }
    }
    

    @Override
    public void searchByKeyword(String keyword) {
        List<Drinks> drinks = this.fetchDrinksByKeyword(keyword);

        drinkTblModel = (DefaultTableModel) tblDrinks.getModel();
        drinkTblModel.setRowCount(0);

        for (Drinks drink : drinks) {
            Object[] rowData = {
                drink.getId(),
                drink.getName(),
                drink.getUnitPrice(),
                drink.getDiscount(),
                drink.isAvailable() ? "Còn hàng" : "Hết hàng"
            };
            drinkTblModel.addRow(rowData);
        }
    }
    
    public List<Drinks> fetchDrinksByKeyword(String keyword) {
        String sql = """
                     select d
                     from Drinks d
                     where d.name like :keyword
                     """;
        try (Session session = HibernateUtil.getSession()) {
            return session.createQuery(sql, Drinks.class)
                          .setParameter("keyword", "%" + keyword + "%") 
                          .list();
        }
    }
    
    JPopupMenu popup = new JPopupMenu();
    JList<String> suggestionList = new JList<>();
    
    public void getSuggestionList() {
        txtKeyword.getDocument().addDocumentListener(new DocumentListener() {
            public void update() {
                String keyword = txtKeyword.getText();
                if(keyword.isEmpty()) {
                    popup.setVisible(false);
                    return;
                }
            
                List<Drinks> drinks = fetchDrinksByKeyword(keyword);
                List<String> names = drinks.stream().map(Drinks::getName).toList();
                suggestionList.setListData(names.toArray(String[]::new));
                
                if(!names.isEmpty()) {
                    popup.removeAll();
                    popup.add(new JScrollPane(suggestionList));
                    popup.show(txtKeyword, 0, txtKeyword.getHeight());
                }else popup.setVisible(true);
                
                
            }
                @Override public void insertUpdate(DocumentEvent e) { update(); }
                @Override public void removeUpdate(DocumentEvent e) { update(); }
                @Override public void changedUpdate(DocumentEvent e) { update(); }
        });
        
        suggestionList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                String selected = suggestionList.getSelectedValue();
                 if (selected != null) {
                    txtKeyword.setText(selected);
                    popup.setVisible(false);
                    searchByKeyword(selected); // load vào JTable
                }
            }
            
        });
   
    }

}
