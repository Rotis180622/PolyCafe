/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.poly.polycafe.ui;

import com.poly.polycafe.dao.BillDAO;
import com.poly.polycafe.daoimpl.BillDAOImpl;
import com.poly.polycafe.entity.Bill;
import com.poly.polycafe.ui.manager.BillManagerJDialog;
import com.poly.polycafe.utils.TimeRange;
import java.awt.Frame;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.table.DefaultTableModel;
import lombok.*;

/**
 *
 * @author Gaudomun
 */
@Getter @Setter
public class HistoryJDialog extends javax.swing.JDialog {
    
    private String username;
    /**
     * Creates new form HistoryJDialog
     */
    public HistoryJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        spnBegin = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        spnEnd = new javax.swing.JSpinner();
        cboTimeRange = new javax.swing.JComboBox<>();
        btnFilter = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblHistory = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Lịch sử bán hàng");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setText("Ngày bắt đầu");

        spnBegin.setModel(new javax.swing.SpinnerDateModel());

        jLabel2.setText("Ngày kết thúc");

        spnEnd.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, null, java.util.Calendar.MINUTE));

        cboTimeRange.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hôm nay", "Tuần này", "Tháng này", "Quý này", "Năm nay" }));
        cboTimeRange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboTimeRangeActionPerformed(evt);
            }
        });

        btnFilter.setText("Lọc");
        btnFilter.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnFilterMouseClicked(evt);
            }
        });
        btnFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spnBegin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spnEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cboTimeRange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(spnBegin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(spnEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFilter)
                    .addComponent(cboTimeRange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        tblHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Mã phiếu", "Thẻ số", "Thời điểm tạo phiếu", "Thời điểm thanh toán", "Trạng thái"
            }
        ));
        tblHistory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblHistoryMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblHistory);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 636, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cboTimeRangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboTimeRangeActionPerformed
        this.getTimeRange();
    }//GEN-LAST:event_cboTimeRangeActionPerformed

    private void btnFilterMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnFilterMouseClicked

    }//GEN-LAST:event_btnFilterMouseClicked

    private void btnFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterActionPerformed
        TimeRange ts = this.getTimeRange();
        this.filterByTimeRange(username,ts.getBegin(), ts.getEnd());
    }//GEN-LAST:event_btnFilterActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        this.open();
        
    }//GEN-LAST:event_formWindowOpened

    private void tblHistoryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblHistoryMouseClicked
        this.showBillJDialog();
    }//GEN-LAST:event_tblHistoryMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HistoryJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HistoryJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HistoryJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HistoryJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                HistoryJDialog dialog = new HistoryJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFilter;
    private javax.swing.JComboBox<String> cboTimeRange;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner spnBegin;
    private javax.swing.JSpinner spnEnd;
    private javax.swing.JTable tblHistory;
    // End of variables declaration//GEN-END:variables
   List<Bill> billList = List.of();
    
    public void filterByTimeRange(String username, LocalDateTime begin, LocalDateTime end) {     
        BillDAO billDao = new BillDAOImpl();
       billList = billDao.findByUserAndTimeRange(username, Timestamp.valueOf(begin), Timestamp.valueOf(end));
       DefaultTableModel model = (DefaultTableModel)tblHistory.getModel();
       model.setRowCount(0);
       
       Map<Integer, String> statusMap = new HashMap<>();
       statusMap.put(0, "Canceled");
       statusMap.put(1, "Servicing");
       statusMap.put(2, "Completed");
       String statusText= "";
               
       for(Bill bill :billList) {
            statusText= statusMap.get(bill.getStatus());
            Object[] rowData = {
                bill.getId(),
                "Thẻ số #" + bill.getCardId(),
                bill.getCheckin(),
                bill.getCheckout()!=null ? bill.getCheckout(): "Chưa checkout",
                statusText,
            };
            model.addRow(rowData);
        }
    }
    
    public TimeRange getTimeRange() {
        String selected = (String) cboTimeRange.getSelectedItem();
        TimeRange tr = switch (selected) {
            case "Hôm nay"   -> TimeRange.today();
            case "Tuần này"  -> TimeRange.thisWeek();
            case "Tháng này" -> TimeRange.thisMonth();
            case "Quý này"   -> TimeRange.thisQuarter();
            case "Năm nay"   -> TimeRange.thisYear();
            default           -> null;
        };

        if (tr != null) {
            Date beginDate = Timestamp.valueOf(tr.getBegin());
            Date endDate = Timestamp.valueOf(tr.getEnd());

            spnBegin.setValue(beginDate);
            spnEnd.setValue(endDate);
        } else {
            System.err.println("[WARN] Không có khoảng thời gian hợp lệ được chọn!");
        }

        return tr;
    }
    
    public void showBillJDialog() {
        Bill bill = billList.get(tblHistory.getSelectedRow());
        BillManagerJDialog dialog = new BillManagerJDialog((Frame) this.getOwner(), true);
        dialog.setBilll(bill); 
        dialog.setVisible(true);
        dialog.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosed(java.awt.event.WindowEvent e) {
                //HistoryJDialog.this.fillBills();
            }
        });
    }
    
    public void fillBills() {
       BillDAO billDao = new BillDAOImpl();
       billList = billDao.findByUsername(username);
       DefaultTableModel model = (DefaultTableModel)tblHistory.getModel();
       model.setRowCount(0);
       
       Map<Integer, String> statusMap = new HashMap<>();
       statusMap.put(0, "Canceled");
       statusMap.put(1, "Servicing");
       statusMap.put(2, "Completed");
       String statusText= "";
               
       for(Bill bill :billList) {
            statusText= statusMap.get(bill.getStatus());
            Object[] rowData = {
                bill.getId(),
                "Thẻ số #" + bill.getCardId(),
                bill.getCheckin(),
                bill.getCheckout()!=null ? bill.getCheckout(): "Chưa checkout",
                statusText,
            };
            model.addRow(rowData);
        }
    }
    
    public void open() {
        this.fillBills();
        this.setLocationRelativeTo(null);
    }

}
